import { type PropType } from 'vue';
import { type BaseButtonProps } from '../base-button/BaseButton.vue';
export interface BaseButtonPropsHelper extends BaseButtonProps {
    caption: string;
    eventName: string;
}
/**
 * Wraps content in a modal that can be hidden and shown programmatically.
 */
declare const _sfc_main: import("vue").DefineComponent<{
    /**
     * Wether the modal is visible.
     */
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The heading of the modal.
     */
    heading: {
        type: StringConstructor;
        required: true;
    };
    /**
     * The description of the modal, appearing below the heading.
     */
    description: {
        type: StringConstructor;
    };
    /**
     * An array of actions (buttons) that appear below the modals content. By default, contains a
     * simple done-button that emits the close-event.
     */
    buttons: {
        type: () => (BaseButtonProps & {
            eventName: string;
            caption: string;
        })[];
        default: any;
    };
    /**
     * An icon shown above the modal's heading.
     */
    icon: {
        type: PropType<string>;
        default: any;
    };
    /**
     * The width of the modal.
     */
    width: {
        type: PropType<"normal" | "slim" | "narrow" | "wide">;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * Don't add padding to the modal content.
     */
    noPadding: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    isLocked: import("vue").WritableComputedRef<boolean>;
}, unknown, {
    classes(): string[];
    defaultButton(): Partial<BaseButtonPropsHelper>[];
}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Wether the modal is visible.
     */
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The heading of the modal.
     */
    heading: {
        type: StringConstructor;
        required: true;
    };
    /**
     * The description of the modal, appearing below the heading.
     */
    description: {
        type: StringConstructor;
    };
    /**
     * An array of actions (buttons) that appear below the modals content. By default, contains a
     * simple done-button that emits the close-event.
     */
    buttons: {
        type: () => (BaseButtonProps & {
            eventName: string;
            caption: string;
        })[];
        default: any;
    };
    /**
     * An icon shown above the modal's heading.
     */
    icon: {
        type: PropType<string>;
        default: any;
    };
    /**
     * The width of the modal.
     */
    width: {
        type: PropType<"normal" | "slim" | "narrow" | "wide">;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * Don't add padding to the modal content.
     */
    noPadding: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    visible: boolean;
    buttons: (BaseButtonProps & {
        eventName: string;
        caption: string;
    })[];
    icon: string;
    width: "normal" | "slim" | "narrow" | "wide";
    noPadding: boolean;
}>;
export default _sfc_main;
