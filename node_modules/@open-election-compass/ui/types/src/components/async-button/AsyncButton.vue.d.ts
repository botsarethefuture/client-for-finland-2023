/// <reference types="node" />
import { type PropType } from 'vue';
export interface AsyncButtonProps {
    action: () => Promise<unknown>;
    href?: string;
    type?: 'button' | 'submit' | 'reset';
    theme?: 'primary' | 'positive' | 'neutral' | 'negative' | 'white' | 'primary-dark' | 'transparent';
    size?: 'small' | 'normal' | 'large';
    textAlign?: 'left' | 'center';
    left?: string;
    right?: string;
    disabled?: boolean;
    tabindex: number;
}
/**
 * Renders a basic button with support for icons, themes and sizes. Will execute a given async
 * function on click, display a loading animation, indicate success or show an error message in a
 * modal.
 */
declare const _sfc_main: import("vue").DefineComponent<{
    /**
     * The asynchronous function to execute when the button is clicked. Will trigger the loading
     * animation and wait for the promise to resolve.
     */
    action: {
        type: PropType<() => Promise<unknown>>;
        required: true;
    };
    /**
     * The type of button.
     */
    type: {
        type: PropType<"button" | "submit" | "reset">;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * The global theme to be used. Can indicate the purpose of the button.
     */
    theme: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * The global size to be used.
     */
    size: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    textAlign: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * The FontAwesome icon to be displayed left of the caption.
     */
    left: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The FontAwesome icon to be displayed right of the caption.
     */
    right: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
}, unknown, {
    status: "success" | "error" | "idle" | "pending";
    error: string;
    resetTimeout: NodeJS.Timeout;
}, {
    classes(): string[];
    disabledOrBusy(): boolean;
}, {
    onClick(event: MouseEvent): void;
    scheduleStatusReset(delay?: number): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "success" | "error")[], "click" | "success" | "error", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The asynchronous function to execute when the button is clicked. Will trigger the loading
     * animation and wait for the promise to resolve.
     */
    action: {
        type: PropType<() => Promise<unknown>>;
        required: true;
    };
    /**
     * The type of button.
     */
    type: {
        type: PropType<"button" | "submit" | "reset">;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * The global theme to be used. Can indicate the purpose of the button.
     */
    theme: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * The global size to be used.
     */
    size: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    textAlign: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    /**
     * The FontAwesome icon to be displayed left of the caption.
     */
    left: {
        type: StringConstructor;
        default: string;
    };
    /**
     * The FontAwesome icon to be displayed right of the caption.
     */
    right: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
}>> & {
    onClick?: (...args: any[]) => any;
    onSuccess?: (...args: any[]) => any;
    onError?: (...args: any[]) => any;
}, {
    type: "button" | "submit" | "reset";
    left: string;
    theme: string;
    size: string;
    textAlign: string;
    right: string;
    disabled: boolean;
    tabindex: number;
}>;
export default _sfc_main;
